/**
* Makes E2E Coverage report for CodeCov
* Consumes E2E report generated by playwright e2e tests
* Coverts it into a coverage format compatible with CodeCov
* Author: Mandar Devarshi
* Year: 2022
*/

// Import Json Editor
// https://www.npmjs.com/package/edit-json-file
import editJsonFile from "edit-json-file";

// Main Function
// Instead of import consume the object as an argument
export function createE2ECoverageReport (resultsObj) {
// console.log("=== Running E2E Report Conversion ===", resultsObj)
// console.log("=====================================")
// console.log(resultsObj)
// Open result file which will hold coverage result in the end
let file = editJsonFile(`./result.json`)
// Empty results file
file.empty()
 
let baseIndex=0

// Playwright tests result object i.e target of conversion
// TODO: Needs improvement
const convertObj = resultsObj.suites[baseIndex].specs

// Object to store final report object
var coverageReport = {}

// Passed or Failed
for (const [key,value] of Object.entries(convertObj)) {
    // Stores results of test parts
    var tempObj = {}
    if(!value.ok){
        // Test Failed
        // Add to coverage report
        tempObj = addendumToCoverageTestStatus(value, value.line, value.column)
    }else{
        // Test Passed
        // Add to coverage report
        tempObj = addendumToCoverageTestStatus(value, value.line, value.column)
    }
    // Create A JSON file for coverage
    Object.assign(coverageReport,{...tempObj})
}
    createCoverageReport(coverageReport, file)
}

// Compile and Save to disk e2e coverage JSON results
function createCoverageReport(coverageReport, file){
    file.set(coverageReport)
    file.save()
    return
}

// Individual Test Coverage Status Check and Object Maker 
function addendumToCoverageTestStatus(result, line, column) {
    // create the e2e object
    var coverageReportObj = {}
    const testRoot = result.title
    const path = result.file.toString()
    const baseIndex = 0
    // Loop over length
    for (let index = result.tests.length-1; index >=0 ;index--){
        const statementMap = {
            [index]:{
                "start":{
                    "line": line,
                    "column": column
                },
                "end":{
                    "line": line,
                    "column": column
                }
            }
        }
        const fnMap={}
        const branchMap={}
        const s = {
            // TODO: Add value as per status of test, currently all are set to 1 i.e passed
            [index]: 1
        }
        const f={}
        const b={}

        coverageReportObj = {
            [testRoot]:{
                path: path,
                statementMap: statementMap,
                fnMap : fnMap,
                branchMap: branchMap,
                s:s,
                f:f,
                b:b
            }
        }
    }
    return coverageReportObj
}